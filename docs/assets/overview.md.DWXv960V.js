import{_ as a,c as t,o as i,ag as s}from"./chunks/framework.fdeNJTK-.js";const u=JSON.parse('{"title":"Overview","description":"Overview of Typem","frontmatter":{"title":"Overview","description":"Overview of Typem"},"headers":[],"relativePath":"overview.md","filePath":"overview.md"}'),o={name:"overview.md"};function l(n,e,r,p,c,h){return i(),t("div",null,e[0]||(e[0]=[s('<h1 id="typem" tabindex="-1">Typem <a class="header-anchor" href="#typem" aria-label="Permalink to &quot;Typem&quot;">​</a></h1><p><a href="https://www.npmjs.com/package/typem" target="_blank" rel="noreferrer"><img src="https://img.shields.io/npm/v/typem" alt="npm"></a><img src="https://img.shields.io/github/license/weisrc/typem" alt="GitHub"></p><p>The Typem Project is a set of packages to create functionality based on TypeScript types. It comes with a set of packages to help you create type-safe code with less boilerplate.</p><ul><li><a href="/typem/typem.html">Typem</a> to create TypeScript macros and common annotations.</li><li><a href="/typem/predicate.html">Predicate</a> to validate values using TypeScript types.</li><li><a href="/typem/json-schema.html">JSON Schema</a> to generate JSON schema from TypeScript types.</li><li><a href="/typem/fetch-handler.html">Fetch Handler</a> to create HTTP handlers with type safety.</li><li><a href="/typem/routes-openapi.html">Routes OpenAPI</a> to create OpenAPI documentation for your routes.</li></ul><p>The following packages are planned for the future:</p><ul><li><a href="/typem/reflect.html">Reflect</a> to reflect and run custom runtime macros.</li><li><a href="/typem/preset.html">Preset</a> to create default values for a type.</li><li><a href="/typem/binary.html">Binary</a> for binary serialization and deserialization.</li></ul><p>If you have ideas for new packages of functionality, please open an issue on the GitHub Repository.</p><h2 id="objective" tabindex="-1">Objective <a class="header-anchor" href="#objective" aria-label="Permalink to &quot;Objective&quot;">​</a></h2><p>The ideal scenario is to use a single annotated type for various tasks such as validation, JSON schema generation, serialization, database schema creation, and more. However, achieving this in all cases may not be feasible. This project aims to bring us a step closer to that goal with less boilerplate code and tree-shaking in mind.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p><code>typem</code> should be installed as a dependency. See the individual package documentation for installation instructions.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typem</span></span></code></pre></div><p>Then use the provided plugin for your build tool.</p><h3 id="rollup-and-vite" tabindex="-1">Rollup and Vite <a class="header-anchor" href="#rollup-and-vite" aria-label="Permalink to &quot;Rollup and Vite&quot;">​</a></h3><p>Import <code>typem/vite</code> or <code>typem/rollup</code> and use the plugin in your configuration file.</p><h3 id="bun" tabindex="-1">Bun <a class="header-anchor" href="#bun" aria-label="Permalink to &quot;Bun&quot;">​</a></h3><p>In your <code>bunfig.toml</code> file, add the following:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">preload = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typem/bun-preload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>There is no support for the TypeScript compiler yet. You can use Bun or bundle your code with Rollup or Vite.</p></div><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>This project is licensed under the MIT License. Contributions are welcome!</p>',21)]))}const m=a(o,[["render",l]]);export{u as __pageData,m as default};
